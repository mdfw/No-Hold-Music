//
//  FloatBalloon.m
//  No Hold Music
//
//  Created by Mark Williams on 5/10/16.
//  Copyright (c) 2016 The Fascinating Group. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//
//  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
//  except in compliance with the License. You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
//  Unless required by applicable law or agreed to in writing, software distributed under the
//  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
//  either express or implied. See the License for the specific language governing permissions
//  and limitations under the License.
//
//  While this file is licensed under Apache 2.0, the original image is licensed
//  under CC BY 3.0 US
//     http://creativecommons.org/licenses/by/3.0/us/
//  A copy of the image with appropriate licensing is available at
//     https://thenounproject.com/term/balloon/232963/

#import "FloatBalloon.h"


@implementation FloatBalloon

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawBalloonWithBalloonFillColor: (NSColor*)balloonFillColor
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;

    //// noun_232963_cc.svg Group
    {
        //// Group 2
        {
            [NSGraphicsContext saveGraphicsState];
            CGContextTranslateCTM(context, 256, 256);
            CGContextScaleCTM(context, 14, 14);



            //// Balloon Body
            {
                //// balloonFill Drawing
                NSBezierPath* balloonFillPath = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(-10.14, -8, 20.36, 23.14)];
                [balloonFillColor setFill];
                [balloonFillPath fill];


                //// Bezier Drawing
                NSBezierPath* bezierPath = [NSBezierPath bezierPath];
                [bezierPath moveToPoint: NSMakePoint(0, -10)];
                [bezierPath curveToPoint: NSMakePoint(-12, 4) controlPoint1: NSMakePoint(-6.76, -10) controlPoint2: NSMakePoint(-12, -2.48)];
                [bezierPath curveToPoint: NSMakePoint(0, 16) controlPoint1: NSMakePoint(-12, 10.62) controlPoint2: NSMakePoint(-6.62, 16)];
                [bezierPath curveToPoint: NSMakePoint(12, 4) controlPoint1: NSMakePoint(6.62, 16) controlPoint2: NSMakePoint(12, 10.62)];
                [bezierPath curveToPoint: NSMakePoint(0, -10) controlPoint1: NSMakePoint(12, -2.48) controlPoint2: NSMakePoint(6.76, -10)];
                [bezierPath closePath];
                [bezierPath moveToPoint: NSMakePoint(0, 14)];
                [bezierPath curveToPoint: NSMakePoint(-10, 4) controlPoint1: NSMakePoint(-5.51, 14) controlPoint2: NSMakePoint(-10, 9.51)];
                [bezierPath curveToPoint: NSMakePoint(0, -8) controlPoint1: NSMakePoint(-10, -1.44) controlPoint2: NSMakePoint(-5.54, -8)];
                [bezierPath curveToPoint: NSMakePoint(10, 4) controlPoint1: NSMakePoint(5.54, -8) controlPoint2: NSMakePoint(10, -1.44)];
                [bezierPath curveToPoint: NSMakePoint(0, 14) controlPoint1: NSMakePoint(10, 9.51) controlPoint2: NSMakePoint(5.51, 14)];
                [bezierPath closePath];
                [bezierPath setMiterLimit: 4];
                [NSColor.grayColor setFill];
                [bezierPath fill];
            }


            //// Connection
            {
                //// Bezier 2 Drawing
                NSBezierPath* bezier2Path = [NSBezierPath bezierPath];
                [bezier2Path moveToPoint: NSMakePoint(3.62, -12)];
                [bezier2Path lineToPoint: NSMakePoint(-3.62, -12)];
                [bezier2Path lineToPoint: NSMakePoint(-1.62, -8)];
                [bezier2Path lineToPoint: NSMakePoint(1.62, -8)];
                [bezier2Path lineToPoint: NSMakePoint(3.62, -12)];
                [bezier2Path closePath];
                [bezier2Path setMiterLimit: 4];
                [NSColor.grayColor setFill];
                [bezier2Path fill];
            }


            //// Stem
            {
                //// Rectangle Drawing
                NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRect: NSMakeRect(-1, -16, 2, 5)];
                [NSColor.grayColor setFill];
                [rectanglePath fill];
            }



            [NSGraphicsContext restoreGraphicsState];
        }
    }
}

+ (void)drawAcknowledgement
{
    //// Color Declarations
    NSColor* textForeground = [NSColor colorWithCalibratedRed: 0 green: 0 blue: 0 alpha: 1];

    //// Credit Drawing
    NSRect creditRect = NSMakeRect(15, 0, 357, 45);
    NSMutableParagraphStyle* creditStyle = [NSMutableParagraphStyle new];
    creditStyle.alignment = NSLeftTextAlignment;

    NSDictionary* creditFontAttributes = @{NSFontAttributeName: [NSFont systemFontOfSize: NSFont.systemFontSize], NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: creditStyle};

    [@"Created by Icon Utopia from the Noun Project\nhttps://thenounproject.com/iconutopia/uploads/?i=232963\n" drawInRect: NSOffsetRect(creditRect, 0, 1) withAttributes: creditFontAttributes];
}

#pragma mark Generated Images

+ (NSImage*)imageOfBalloonWithBalloonFillColor: (NSColor*)balloonFillColor
{
    NSImage* imageOfBalloon = [[NSImage alloc] initWithSize: NSMakeSize(512, 512)];
    [imageOfBalloon lockFocus];
    [FloatBalloon drawBalloonWithBalloonFillColor: balloonFillColor];

    [imageOfBalloon unlockFocus];

    return imageOfBalloon;
}

@end
